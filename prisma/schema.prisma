// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image         UserImage?
  password      Password?
  notes         Note[]
  roles         Role[]
  sessions      Session[]
  connections   Connection[]
  subscriptions Subscription[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

// == Lemon Squeezy related models
model Subscription {
  id                 String  @id @default(cuid())
  lemonSqueezyId     String  @unique // attributes.order_id??? is it subsId???
  orderId            Int     @unique //change it to string
  name               String
  email              String
  status             String //on_trial,active,paused,past_due,unpaid,cancelled,expired, 
  statusFormatted    String // keep one of status or statusFormatted.
  renewsAt           String?
  // ends_at: If the subscription has as status of cancelled or expired, 
  // this will be an ISO 8601 formatted date-time string indicating when
  // the subscription expires (or expired). For all other status values, 
  // this will be null.
  endsAt             String? // Not required for license based product
  trialEndsAt        String? // Not required for license based product
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId String? @unique
  // One to many, one plan/variant can be part of many subscriptions.
  plan               Plan    @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  planId             String
  // One to many, one user can have many subscriptions.
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Add ", onDelete: Cascade, onUpdate: Cascade"!?
  userId             String

  @@index([planId, lemonSqueezyId])
}

// Plan maps to Variants in LS
model Plan {
  id                 String         @id @default(cuid())
  productId          Int //change it to string(TBD)
  productName        String?
  variantId          Int            @unique // change it to string
  name               String // variant-name, Need to get from Product
  description        String?
  price              String
  isUsageBased       Boolean        @default(false)
  interval           String? // Not required for license based product
  intervalCount      Int? // Not required for license based product
  trialInterval      String? // Not required for license based product
  trialIntervalCount Int? // Not required for license based product
  sort               Int? // variant['attributes']['sort']
  subscriptions      Subscription[]
  // You can chose either credits and/or limits
  // As per your use case 
  credits            Int            @default(10)
  limits             PlanLimit?
}

// Plan limits are used to describe the limits available to a plan.
model PlanLimit {
  id       String @id @default(cuid())
  plan     Plan   @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  planId   String @unique
  // Define your own limits. For eg, you can limit the number of items a user can create.
  maxItems Int    @default(0)
}

model WebhookEvent {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            String // sqlite3 doesnot support "Json"
  processingError String?
}

// course contains many units
model Course {
  id    String @id @default(cuid())
  name  String
  image String
  units Unit[]
}

// unit contains many chapters
model Unit {
  id       String @id @default(cuid())
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id     String @id @default(cuid())
  unitId String

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]

  @@index([unitId], name: "unitId")
}

model Question {
  id        String @id @default(cuid())
  chapterId String

  question String
  answer   String
  options  String
  chapter  Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}
